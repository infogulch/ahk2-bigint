#SingleInstance Force

/*
    Description:
    Class (testgroup)
        Each class is a testgroup with the intention of thoroughly 
        testing a process or function. The testgroup consists of 
        multiple tests
    function (test)
      - each function that is prefixed with "test_" is called.
        This allows other stuff to be present in the testgroup
        without it actually being called as a test, and allows 
        individual tests to be "commented out" but still available
        explicitly
      - creates new instance of assertion class
      - creates new instance(s) of the process or function to be tested, 
        with the very specific contexts and uses the local scope of the
        function as isolation between it and other tests
      - execute the actual code to be tested.
      - assertions are called regarding all changes the tested code could 
        have made to the context
    assertions
      - create a new instance like this: 
            a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
      - by design, there are intended to be multiple assertions per test
        this allows thorough affirmation of the entire context
      - when the test concludes (end of function) the deconstructer of the
        assertion class is called sends the results to all methods in the 
        testgroup's "outputmethods" array
*/

/* TODO
Finish:
    tests_new
    tests_mult
    tests_pow
Add:
    tests_or
    tests_and
    tests_xor
    tests_not
    tests_div
    
    Zero tests on all functions.
    
    Check that functions that should take non-BigInt are able to.
    
    Base conversion function. integrate it with __new().
    
    method parameter naming scheme: n: ahk-number, b: bigint; s: array of n and/or b
        used like: nb (number or BigInt) nbs (array of numbers or bigints)
                   b (only bigint)
                   n (only number)
    
    tests for __new getting ahk number > 32 bits long
Fix:
*/

runUnitTests(new tests_eq())
class tests_eq {
    outputmethods := [func("output_msgbox")]
    
    test_small_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(8)
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 9)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 8)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, 1)
    }
    test_small_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(9)
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 8)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 9)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, 1)
    }
    test_small_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(8)
        
        
        res := x.eq(y)
        a.true(res)
        
        a.equals(x[1], 8)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 8)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, 1)
    }
    test_small_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(-9)
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 8)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 9)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, -1)
    }
    test_small_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(-8)
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 9)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 8)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, -1)
    }
    test_small_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-9)
        
        
        res := x.eq(y)
        a.true(res)
        
        a.equals(x[1], 9)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 9)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, -1)
    }
    test_small_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(9)
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 8)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 9)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, 1)
    }
    test_small_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(8)
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 9)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 8)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, 1)
    }
    test_small_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-8)
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 9)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 8)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, -1)
    }
    test_small_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 8)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 9)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, -1)
    }
    
    test_normal_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000", "hex")
        y := new BigInt("100000000", "hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 2)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, 1)
    }
    test_normal_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("200000000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 1)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 2)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, 1)
    }
    test_normal_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000000","hex")
        
        
        res := x.eq(y)
        a.true(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 1)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, 1)
    }
    test_normal_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("-200000000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 1)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 2)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, -1)
    }
    test_normal_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-200000000","hex")
        
        
        res := x.eq(y)
        a.true(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 2)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 2)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, -1)
    }
    test_normal_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 2)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, -1)
    }
    test_normal_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("200000000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 1)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 2)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, 1)
    }
    test_normal_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 2)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, 1)
    }
    test_normal_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-100000000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 2)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, -1)
    }
    test_normal_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("-200000000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 1)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 2)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, -1)
    }

    test_both_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001", "hex")
        y := new BigInt("100000000", "hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 1)
        a.equals(x[2], 1)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, 1)
    }
    test_both_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000001","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 1)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 1)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, 1)
    }
    test_both_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("100000001","hex")
        
        
        res := x.eq(y)
        a.true(res)
        
        a.equals(x[1], 1)
        a.equals(x[2], 1)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 1)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, 1)
    }
    test_both_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("-200000001","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 1)
        a.equals(x[2], 1)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 1)
        a.equals(y[2], 2)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, -1)
    }
    test_both_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-200000001","hex")
        
        
        res := x.eq(y)
        a.true(res)
        
        a.equals(x[1], 1)
        a.equals(x[2], 2)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 1)
        a.equals(y[2], 2)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, -1)
    }
    test_both_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000001","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 2)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, 1)
        
        a.equals(y[1], 1)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, -1)
    }
    test_both_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000001","hex")
        y := new BigInt("200000000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 1)
        a.equals(x[2], 1)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 2)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, 1)
    }
    test_both_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000001","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 2)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 1)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, 1)
    }
    test_both_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-100000000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 1)
        a.equals(x[2], 2)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 1)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, -1)
    }
    test_both_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-1000","hex")
        y := new BigInt("-200000000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0x1000)
        a.equals(x._maxindex(), 1)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 0)
        a.equals(y[2], 2)
        a.equals(y._maxindex(), 2)
        a.equals(y.neg, -1)
    }
    test_both_left_neg_both2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-1000","hex")
        
        
        res := x.eq(y)
        a.false(res)
        
        a.equals(x[1], 0)
        a.equals(x[2], 2)
        a.equals(x._maxindex(), 2)
        a.equals(x.neg, -1)
        
        a.equals(y[1], 0x1000)
        a.equals(y._maxindex(), 1)
        a.equals(y.neg, -1)
    }

}

runUnitTests(new tests_noteq())
class tests_noteq {
    outputmethods := [func("output_msgbox")]
    test_small_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(8)
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(9)
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(8)
        
        res := x.noteq(y)
        a.false(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(-9)
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(-8)
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-9)
        
        res := x.noteq(y)
        a.false(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(9)
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(8)
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-8)
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_normal_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("200000000", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_normal_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("200000000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_normal_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000000","hex")
        
        res := x.noteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("100000000","hex")))
    }
    test_normal_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_normal_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.noteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_normal_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("200000000","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_normal_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("200000000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-100000000","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_normal_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("100000000","hex")))
    }
    test_normal_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_normal_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-100000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_both_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000001", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_both_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000001","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("100000001","hex")
        
        res := x.noteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000001","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("-200000001","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000001","hex")))
        a.true(y.eq(new BigInt("-200000001","hex")))
    }
    test_both_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-200000001","hex")
        
        res := x.noteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000001","hex")))
        a.true(y.eq(new BigInt("-200000001","hex")))
    }
    test_both_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000001","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("200000000","hex")))
        a.true(y.eq(new BigInt("-100000001","hex")))
    }
    test_both_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000001","hex")
        y := new BigInt("200000000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-100000001","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_both_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000001","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000001","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_both_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-1000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-1000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_both_left_neg_both2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-1000","hex")
        
        res := x.noteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-1000","hex")))
    }
}

runUnitTests(new tests_gt())
class tests_gt {
    outputmethods := [func("output_msgbox")]
    test_small_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(8)
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(9)
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(8)
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(-9)
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(-8)
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-9)
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(9)
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(8)
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-8)
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_normal_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt("200000000", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_normal_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("200000000","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_normal_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000000","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("100000000","hex")))
    }
    test_normal_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_normal_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_normal_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt("200000000","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_normal_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("200000000","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-100000000","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_normal_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000000","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("100000000","hex")))
    }
    test_normal_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_normal_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt("-100000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_both_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000001", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_both_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000001","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("100000001","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000001","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("-200000001","hex")
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000001","hex")))
        a.true(y.eq(new BigInt("-200000001","hex")))
    }
    test_both_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-200000001","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000001","hex")))
        a.true(y.eq(new BigInt("-200000001","hex")))
    }
    test_both_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000001","hex")
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt("200000000","hex")))
        a.true(y.eq(new BigInt("-100000001","hex")))
    }
    test_both_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000001","hex")
        y := new BigInt("200000000","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-100000001","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_both_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000001","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000001","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_both_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-1000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.gt(y)
        a.true(res)
        a.true(x.eq(new BigInt("-1000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_both_left_neg_both2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-1000","hex")
        
        res := x.gt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-1000","hex")))
    }
}

runUnitTests(new tests_gteq())
class tests_gteq {
    outputmethods := [func("output_msgbox")]
    test_small_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(8)
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(9)
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(8)
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(-9)
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(-8)
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-9)
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(9)
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(8)
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-8)
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_normal_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("200000000", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_normal_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("200000000","hex")
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_normal_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000000","hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("100000000","hex")))
    }
    test_normal_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_normal_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_normal_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("200000000","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_normal_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("200000000","hex")
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-100000000","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_normal_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000000","hex")
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("100000000","hex")))
    }
    test_normal_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_normal_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-100000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_both_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000001", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_both_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000001","hex")
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("100000001","hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000001","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("-200000001","hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000001","hex")))
        a.true(y.eq(new BigInt("-200000001","hex")))
    }
    test_both_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-200000001","hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000001","hex")))
        a.true(y.eq(new BigInt("-200000001","hex")))
    }
    test_both_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000001","hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("200000000","hex")))
        a.true(y.eq(new BigInt("-100000001","hex")))
    }
    test_both_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000001","hex")
        y := new BigInt("200000000","hex")
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-100000001","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_both_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000001","hex")
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000001","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_both_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-1000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.gteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-1000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_both_left_neg_both2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-1000","hex")
        
        res := x.gteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-1000","hex")))
    }
}

runUnitTests(new tests_lt())
class tests_lt {
    outputmethods := [func("output_msgbox")]
    test_small_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(8)
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(9)
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(8)
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(-9)
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(-8)
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-9)
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(9)
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(8)
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-8)
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
        
        res := x.lt(y)
        a.false(res)
    }
    test_normal_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("200000000", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_normal_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("200000000","hex")
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_normal_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000000","hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("100000000","hex")))
    }
    test_normal_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_normal_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_normal_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("200000000","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_normal_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("200000000","hex")
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt("-100000000","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_normal_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000000","hex")
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("100000000","hex")))
    }
    test_normal_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_normal_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-100000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_both_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000001", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_both_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000001","hex")
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("100000001","hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000001","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("-200000001","hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000001","hex")))
        a.true(y.eq(new BigInt("-200000001","hex")))
    }
    test_both_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-200000001","hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-200000001","hex")))
        a.true(y.eq(new BigInt("-200000001","hex")))
    }
    test_both_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000001","hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("200000000","hex")))
        a.true(y.eq(new BigInt("-100000001","hex")))
    }
    test_both_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000001","hex")
        y := new BigInt("200000000","hex")
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt("-100000001","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_both_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000001","hex")
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000001","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_both_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-1000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.lt(y)
        a.false(res)
        a.true(x.eq(new BigInt("-1000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_both_left_neg_both2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-1000","hex")
        
        res := x.lt(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-1000","hex")))
    }
}

runUnitTests(new tests_lteq())
class tests_lteq {
    outputmethods := [func("output_msgbox")]
    test_small_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(8)
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(9)
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(8)
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(-9)
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(-8)
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-9)
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(9)
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(8)
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-8)
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_normal_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("200000000", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_normal_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("200000000","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_normal_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000000","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("100000000","hex")))
    }
    test_normal_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_normal_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_normal_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("200000000","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_normal_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("200000000","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-100000000","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_normal_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000000","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("100000000","hex")))
    }
    test_normal_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_normal_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-100000000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_both_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000001", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_both_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000","hex")
        y := new BigInt("100000001","hex")
        i := max(x._maxindex(), y._maxindex())
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000000","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("100000001","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("100000001","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_left_neg_right() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001","hex")
        y := new BigInt("-200000001","hex")
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("100000001","hex")))
        a.true(y.eq(new BigInt("-200000001","hex")))
    }
    test_both_left_neg_right2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-200000001","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000001","hex")))
        a.true(y.eq(new BigInt("-200000001","hex")))
    }
    test_both_left_neg_right3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000","hex")
        y := new BigInt("-100000001","hex")
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("200000000","hex")))
        a.true(y.eq(new BigInt("-100000001","hex")))
    }
    test_both_right_neg_left() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000001","hex")
        y := new BigInt("200000000","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-100000001","hex")))
        a.true(y.eq(new BigInt("200000000","hex")))
    }
    test_both_right_neg_left2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("100000001","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("100000001","hex")))
    }
    test_both_right_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000001","hex")
        y := new BigInt("-100000000","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000001","hex")))
        a.true(y.eq(new BigInt("-100000000","hex")))
    }
    test_both_left_neg_both() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-1000","hex")
        y := new BigInt("-200000000","hex")
        
        res := x.lteq(y)
        a.false(res)
        a.true(x.eq(new BigInt("-1000","hex")))
        a.true(y.eq(new BigInt("-200000000","hex")))
    }
    test_both_left_neg_both2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt("-1000","hex")
        
        res := x.lteq(y)
        a.true(res)
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt("-1000","hex")))
    }
}

runUnitTests(new tests_sum())
class tests_sum {
    outputmethods := [func("output_msgbox")]
    test_small1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(8)
        
        res := x.sum([y])
        a.equals(res[1], 17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(8)
        
        res := x.sum([y])
        a.equals(res[1],1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1) 
        
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(-8)
        
        res := x.sum([y])
        a.equals(res[1],1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(-8)))
    }   
    test_small4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-8)
        
        res := x.sum([y])
        a.equals(res[1],17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small5() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(9)
        
        res := x.sum([y])
        a.equals(res[1],17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(9)))
    }   
    test_small6() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(9)
        
        res := x.sum([y])
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small7() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(-9)
        
        res := x.sum([y])
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small8() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        res := x.sum([y])
        a.equals(res[1], 17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small9() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        res := x.sum([y])
        a.equals(res[1], 17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small10() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(0)
        
        res := x.sum([y])
        a.equals(res[1], 8)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(0)))
    }
    test_small11() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(0)
        
        res := x.sum([y])
        a.equals(res[1], 8)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(0)))
    }
    test_small12() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(0)
        y := new BigInt(-9)
        
        res := x.sum([y])
        a.equals(res[1], 9)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(0)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_small13() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(0)
        y := new BigInt(9)
        
        res := x.sum([y])
        a.equals(res[1], 9)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(0)))
        a.true(y.eq(new BigInt(9)))
    }
    test_small14() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(0)
        y := new BigInt(0)
        
        res := x.sum([y])
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(0)))
        a.true(y.eq(new BigInt(0)))
    }
    test_normal1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000", "hex")
        y := new BigInt(1)
        
        res := x.sum([y])
        a.equals(res[1], 1)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("200000000", "hex")))
        a.true(y.eq(new BigInt(1)))
    }
    test_normal2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        y := new BigInt(-1)
        
        res := x.sum([y])
        a.equals(res[1], 0xffffffff )
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
        a.true(y.eq(new BigInt(-1)))
    }
    test_normal3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.sum([y])
        a.equals(res[1], 0)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_normal4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        y := new BigInt("-100000000", "hex")
        
        res := x.sum([y])
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
        a.true(y.eq(new BigInt("-100000000", "hex")))
    }
    test_normal5() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.sum([y])
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("-100000000", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_normal6() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000", "hex")
        y := new BigInt("-100000000", "hex")
        
        res := x.sum([y])
        a.equals(res[1], 0)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt("-100000000", "hex")))
        a.true(y.eq(new BigInt("-100000000", "hex")))
    }
    test_normal7() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("20000000000000000", "hex")
        y := new BigInt("-100000000", "hex")
        
        res := x.sum([y])
        a.equals(res[1], 0)
        a.equals(res[2], 0xffffffff)
        a.equals(res[3], 1)
        a.equals(res._maxindex(), 3)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("20000000000000000", "hex")))
        a.true(y.eq(new BigInt("-100000000", "hex")))
    }
    test_normal8() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("20000000000000000", "hex")
        y := new BigInt("-100000001", "hex")
        
        res := x.sum([y])
        a.equals(res[1], 0xffffffff)
        a.equals(res[2], 0xfffffffe)
        a.equals(res[3], 1)
        a.equals(res._maxindex(), 3)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("20000000000000000", "hex")))
        a.true(y.eq(new BigInt("-100000001", "hex")))
    }
}

runUnitTests(new tests_add())
class tests_add {
    outputmethods := [func("output_msgbox")]
    test_Basic1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(8)
        
        res := x.add(y)
        a.equals(res[1], 17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_Basic2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(8)
        
        res := x.add(y)
        a.equals(res[1],1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_Basic3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(-8)
        
        res := x.add(y)
        a.equals(res[1],1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(-8)))
    }   
    test_Basic4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-8)
        
        res := x.add(y)
        a.equals(res[1],17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_Basic5() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(9)
        
        res := x.add(y)
        a.equals(res[1],17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(9)))
    }   
    test_Basic6() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(9)
        
        res := x.add(y)
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_Basic7() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(-9)
        
        res := x.add(y)
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_Basic8() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        res := x.add(y)
        a.equals(res[1], 17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_Basic9() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        res := x.add(y)
        a.equals(res[1], 17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_normal1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000", "hex")
        y := new BigInt(1)
        
        res := x.add(y)
        a.equals(res[1], 1)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("200000000", "hex")))
        a.true(y.eq(new BigInt(1)))
    }
    test_normal2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        y := new BigInt(-1)
        
        res := x.add(y)
        a.equals(res[1], 0xffffffff )
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
        a.true(y.eq(new BigInt(-1)))
    }
    test_normal3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.add(y)
        a.equals(res[1], 0)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_normal4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        y := new BigInt("-100000000", "hex")
        
        res := x.add(y)
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
        a.true(y.eq(new BigInt("-100000000", "hex")))
    }
    test_normal5() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.add(y)
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("-100000000", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_normal6() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000", "hex")
        y := new BigInt("-100000000", "hex")
        
        res := x.add(y)
        a.equals(res[1], 0)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt("-100000000", "hex")))
        a.true(y.eq(new BigInt("-100000000", "hex")))
    }
    test_normal7() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("20000000000000000", "hex")
        y := new BigInt("-100000000", "hex")
        
        res := x.add(y)
        a.equals(res[1], 0)
        a.equals(res[2], 0xffffffff)
        a.equals(res[3], 1)
        a.equals(res._maxindex(), 3)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("20000000000000000", "hex")))
        a.true(y.eq(new BigInt("-100000000", "hex")))
    }
    test_normal8() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("20000000000000000", "hex")
        y := new BigInt("-100000001", "hex")
        
        res := x.add(y)
        a.equals(res[1], 0xffffffff)
        a.equals(res[2], 0xfffffffe)
        a.equals(res[3], 1)
        a.equals(res._maxindex(), 3)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("20000000000000000", "hex")))
        a.true(y.eq(new BigInt("-100000001", "hex")))
    }
}

runUnitTests(new tests_sub())
class tests_sub {
    outputmethods := [func("output_msgbox")]
    test_Basic1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(8)
        
        res := x.sub(y)
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_Basic2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(8)
        
        res := x.sub(y)
        a.equals(res[1],17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(8)))
    }
    test_Basic3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(9)
        y := new BigInt(-8)
        
        res := x.sub(y)
        a.equals(res[1],17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(9)))
        a.true(y.eq(new BigInt(-8)))
    }   
    test_Basic4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-9)
        y := new BigInt(-8)
        
        res := x.sub(y)
        a.equals(res[1],1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-9)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_Basic5() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(9)
        
        res := x.sub(y)
        a.equals(res[1],1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(9)))
    }   
    test_Basic6() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(9)
        
        res := x.sub(y)
        a.equals(res[1], 17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(9)))
    }
    test_Basic7() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(-9)
        
        res := x.sub(y)
        a.equals(res[1], 17)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_Basic8() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        res := x.sub(y)
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_Basic9() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-9)
        
        res := x.sub(y)
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-9)))
    }
    test_Basic10() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(12)
        y := new BigInt(8)
        
        res := x.sub(y)
        a.equals(res[1], 4)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(12)))
        a.true(y.eq(new BigInt(8)))
    }
    test_normal1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000000", "hex")
        y := new BigInt(1)
        
        res := x.sub(y)
        a.equals(res[1], 0xffffffff)
        a.equals(res[2], 1)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("200000000", "hex")))
        a.true(y.eq(new BigInt(1)))
    }
    test_normal2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        y := new BigInt(-1)
        
        res := x.sub(y)
        a.equals(res[1], 1 )
        a.equals(res[2], 1 )
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
        a.true(y.eq(new BigInt(-1)))
    }
    test_normal3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        y := new BigInt("100000000", "hex")
        
        res := x.sub(y)
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
        a.true(y.eq(new BigInt("100000000", "hex")))
    }
    test_normal4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        y := new BigInt("-100000000", "hex")
        
        res := x.sub(y)
        a.equals(res[1], 0)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
        a.true(y.eq(new BigInt("-100000000", "hex")))
    }
    test_normal5() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000", "hex")
        y := new BigInt( "100000000", "hex")
        
        res := x.sub(y)
        a.equals(res[1], 0)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt("-100000000", "hex")))
        a.true(y.eq(new BigInt( "100000000", "hex")))
    }
    test_normal6() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000", "hex")
        y := new BigInt("-100000000", "hex")
        
        res := x.sub(y)
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("-100000000", "hex")))
        a.true(y.eq(new BigInt("-100000000", "hex")))
    }
    test_normal7() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("20000000000000000", "hex")
        y := new BigInt("-100000000", "hex")
        
        res := x.sub(y)
        a.equals(res[1], 0)
        a.equals(res[2], 1)
        a.equals(res[3], 2)
        a.equals(res._maxindex(), 3)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("20000000000000000", "hex")))
        a.true(y.eq(new BigInt("-100000000", "hex")))
    }
    test_normal8() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("20000000000000000", "hex")
        y := new BigInt("-100000001", "hex")

        res := x.sub(y)
        a.equals(res[1], 1)
        a.equals(res[2], 1)
        a.equals(res[3], 2)
        a.equals(res._maxindex(), 3)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("20000000000000000", "hex")))
        a.true(y.eq(new BigInt("-100000001", "hex")))
    }
}

runUnitTests(new tests_new())
class tests_new {
    outputmethods := [func("output_msgbox")]
    
    test_default() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("acd6820def48327", "hex")
        a.equals(x[1], 0xdef48327)
        a.equals(x[2], 0xacd6820)
        a.equals(x.neg, 1)
    }
    
}

runUnitTests(new tests_mult())
class tests_mult {
    outputmethods := [func("output_msgbox")]
    test_small1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(8)
        
        res := x.mult(y)
        a.equals(res[1], 64)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(8)
        
        res := x.mult(y)
        a.equals(res[1], 64)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(8)))
    }
    test_small3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(8)
        y := new BigInt(-8)
        
        res := x.mult(y)
        a.equals(res[1], 64)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(8)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_small4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-8)
        y := new BigInt(-8)
        
        res := x.mult(y)
        a.equals(res[1], 64)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(-8)))
        a.true(y.eq(new BigInt(-8)))
    }
    test_normal1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("ffffffff","hex")
        y := new BigInt("ffffffff","hex")
        
        res := x.mult(y)
        a.equals(res[1], 1)
        a.equals(res[2], 0xfffffffe)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("ffffffff","hex")))
        a.true(y.eq(new BigInt("ffffffff","hex")))
    }
    test_normal2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("fffffffe","hex")
        y := new BigInt("ffffffff","hex")
        
        res := x.mult(y)
        a.equals(res[1], 2)
        a.equals(res[2], 0xfffffffd)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("fffffffe","hex")))
        a.true(y.eq(new BigInt("ffffffff","hex")))
    }
    test_normal3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("fffffffe","hex")
        y := new BigInt("ffffffef","hex")
        
        res := x.mult(y)
        a.equals(res[1], 34)
        a.equals(res[2], 0xffffffed)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("fffffffe","hex")))
        a.true(y.eq(new BigInt("ffffffef","hex")))
    }
    test_normal4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("acd6820def48327", "hex")
        y := new BigInt("dbe7892978efac42", "hex")
        
        res := x.mult(y)
        a.equals(res[1], 0x7c91040e)
        a.equals(res[2], 0xaea79245)
        a.equals(res[3], 0xc11e0541)
        a.equals(res[4], 0x9477d36)
        a.equals(res.__string(), "09477d36c11e0541aea792457c91040e")
        a.equals(res._maxindex(), 4)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("acd6820def48327", "hex")))
        a.true(y.eq(new BigInt("dbe7892978efac42", "hex")))
    }
}

runUnitTests(new tests_shr())
class tests_shr {
    outputmethods := [func("output_msgbox")]
    test_small() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(16)
        
        res := x.shr()
        a.equals(res[1], 8)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(16)))
    }
    test_small_neg() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-16)
        
        res := x.shr()
        a.equals(res[1], 8)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-16)))
    }
    test_small_zero() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(1)
        
        res := x.shr()
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(1)))
    }
    test_small_zero_neg() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-1)
        
        res := x.shr()
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(-1)))
    }
    test_small_max() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(0xffffffff)
        
        res := x.shr()
        a.equals(res[1], 0xffffffff >> 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(0xffffffff)))
    }
    test_normal() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(0x100000000)
        
        res := x.shr()
        a.equals(res[1], 0x80000000)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(0x100000000)))
    }
    test_normal_neg() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-0x100000000)
        
        res := x.shr()
        a.equals(res[1], 0x80000000)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-0x100000000)))
    }
    test_normal2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(0x100000001)
        
        res := x.shr()
        a.equals(res[1], 0x80000000)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(0x100000001)))
    }
    test_normal3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000001", "hex")
        
        res := x.shr()
        a.equals(res[1], 0)
        a.equals(res[2], 1)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("200000001", "hex")))
    }
    test_normal4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        
        res := x.shr(32)
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
    }
    test_normal5() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("10000000000000000", "hex")
        
        res := x.shr(40)
        a.equals(res[1], 0x1000000)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("10000000000000000", "hex")))
    }
    test_normal_zero() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        
        res := x.shr(33)
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
    }
    test_normal_zero2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("10000000100000000", "hex")
        
        res := x.shr(65)
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("10000000100000000", "hex")))
    }
    test_normal_past() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("1000000010000000", "hex")
        
        res := x.shr(64)
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("1000000010000000", "hex")))
    }
    test_normal_past2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("1000000010000000", "hex")
        
        res := x.shr(84)
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("1000000010000000", "hex")))
    }
}

runUnitTests(new tests_shl())
class tests_shl {
    outputmethods := [func("output_msgbox")]
    test_small() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(16)
        
        res := x.shl()
        a.equals(res[1], 32)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(16)))
    }
    test_small_neg() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-16)
        
        res := x.shl()
        a.equals(res[1], 32)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-16)))
    }
    test_small_zero() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(1)
        
        res := x.shl()
        a.equals(res[1], 2)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(1)))
    }
    test_small_zero_neg() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-1)
        
        res := x.shl()
        a.equals(res[1], 2)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt(-1)))
    }
    test_small_max() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(0xffffffff)
        
        res := x.shl()
        a.equals(res[1], 0xfffffffe)
        a.equals(res[2], 1)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt(0xffffffff)))
    }
    test_normal() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        
        res := x.shl()
        a.equals(res[1], 0)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
    }
    test_normal_neg() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-100000000", "hex")
        
        res := x.shl()
        a.equals(res[1], 0)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, -1)
        a.true(x.eq(new BigInt("-100000000", "hex")))
    }
    test_normal2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000001", "hex")
        
        res := x.shl()
        a.equals(res[1], 2)
        a.equals(res[2], 2)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000001", "hex")))
    }
    test_normal3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("200000001", "hex")
        
        res := x.shl()
        a.equals(res[1], 2)
        a.equals(res[2], 4)
        a.equals(res._maxindex(), 2)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("200000001", "hex")))
    }
    test_normal4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        
        res := x.shl(32)
        a.equals(res[1], 0)
        a.equals(res[2], 0)
        a.equals(res[3], 1)
        a.equals(res._maxindex(), 3)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
    }
    test_normal5() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("10000000000000000", "hex")
        
        res := x.shl(40)
        a.equals(res[1], 0)
        a.equals(res[2], 0)
        a.equals(res[3], 0)
        a.equals(res[4], 0x100)
        a.equals(res._maxindex(), 4)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("10000000000000000", "hex")))
    }
    test_normal_zero() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("100000000", "hex")
        
        res := x.shl(33)
        a.equals(res[1], 0)
        a.equals(res[2], 0)
        a.equals(res[3], 2)
        a.equals(res._maxindex(), 3)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("100000000", "hex")))
    }
    test_normal_zero2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("10000000100000000", "hex")
        
        res := x.shl(65)
        a.equals(res[1], 0)
        a.equals(res[2], 0)
        a.equals(res[3], 0)
        a.equals(res[4], 2)
        a.equals(res[5], 2)
        a.equals(res._maxindex(), 5)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("10000000100000000", "hex")))
    }
    test_normal_past() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("1000000010000000", "hex")
        
        res := x.shl(64)
        a.equals(res[1], 0)
        a.equals(res[2], 0)
        a.equals(res[3], 0x10000000)
        a.equals(res[4], 0x10000000)
        a.equals(res._maxindex(), 4)
        a.equals(res.neg, 1)
        a.true(x.eq(new BigInt("1000000010000000", "hex")))
    }
}

runUnitTests(new tests_pow())
class tests_pow {
    outputmethods := [func("output_msgbox")]
    test_small1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(2)
        y := new BigInt(2)
        
        res := x.pow(y)
        a.equals(res[1],4)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(2)))
        a.true(y.eq(new BigInt(2)))
    }
    test_small2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(10)
        y := new BigInt(2)
        
        res := x.pow(y)
        a.equals(res[1],100)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(10)))
        a.true(y.eq(new BigInt(2)))
    }
    test_small3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(2)
        y := new BigInt(10)
        
        res := x.pow(y)
        a.equals(res[1],1024)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(2)))
        a.true(y.eq(new BigInt(10)))
    }
    test_small4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(1)
        y := new BigInt(10)
        
        res := x.pow(y)
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(1)))
        a.true(y.eq(new BigInt(10)))
    }
    test_small5() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(1)
        y := new BigInt(10000000)
        
        res := x.pow(y)
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(1)))
        a.true(y.eq(new BigInt(10000000)))
    }
    test_small6() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(100)
        y := new BigInt(0)
        
        res := x.pow(y)
        a.equals(res[1], 1)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(100)))
        a.true(y.eq(new BigInt(0)))
    }
    test_small7() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(100)
        y := new BigInt(1)
        
        res := x.pow(y)
        a.equals(res[1], 100)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(100)))
        a.true(y.eq(new BigInt(1)))
    }
    test_small8() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(0)
        y := new BigInt(10000000)
        
        res := x.pow(y)
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(0)))
        a.true(y.eq(new BigInt(10000000)))
    }
    test_small9() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(0)
        y := new BigInt(10000000)
        
        res := x.pow(y)
        a.equals(res[1], 0)
        a.equals(res._maxindex(), 1)
        a.equals(res.neg, 1)
        
        a.true(x.eq(new BigInt(0)))
        a.true(y.eq(new BigInt(10000000)))
    }
}

runUnitTests(new tests_div())
class tests_div {
    outputmethods := [func("output_msgbox")]
    test_small1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(1000)
        y := new BigInt(10)
        
        res := x.div(y,r)
        
        a.equals(res._maxindex(),1)
        a.equals(res[1], 100)
        a.equals(res.neg, 1)
        
        a.equals(r._maxindex(),1)
        a.equals(r[1],0)
        a.equals(r.neg, 1)
        
        a.true(x.eq(new BigInt(1000)))
        a.true(y.eq(new BigInt(10)))
    }
    test_small2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(-1000)
        y := new BigInt(10)
        
        res := x.div(y,r)
        
        a.equals(res._maxindex(),1)
        a.equals(res[1], 100)
        a.equals(res.neg, -1)
        
        a.equals(r._maxindex(),1)
        a.equals(r[1],0)
        a.equals(r.neg, 1)
        
        a.true(x.eq(new BigInt(-1000)))
        a.true(y.eq(new BigInt(10)))
    }
    test_small3() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(1000)
        y := new BigInt(-10)
        
        res := x.div(y,r)
        
        a.equals(res._maxindex(),1)
        a.equals(res[1], 100)
        a.equals(res.neg, -1)
        
        a.equals(r._maxindex(),1)
        a.equals(r[1],0)
        a.equals(r.neg, 1)
        
        a.true(x.eq(new BigInt(1000)))
        a.true(y.eq(new BigInt(-10)))
    }
    test_small4() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(1000)
        y := new BigInt(15)
        
        res := x.div(y,r)
        
        a.equals(res._maxindex(),1)
        a.equals(res[1], 66)
        a.equals(res.neg, 1)
        
        a.equals(r._maxindex(),1)
        a.equals(r[1],10)
        a.equals(r.neg, 1)
        
        a.true(x.eq(new BigInt(1000)))
        a.true(y.eq(new BigInt(15)))
    }
    test_small5() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt(2132546546)
        y := new BigInt(58)
        
        res := x.div(y,r)
        
        a.equals(res._maxindex(),1)
        a.equals(res[1], 36768043)
        a.equals(res.neg, 1)
        
        a.equals(r._maxindex(),1)
        a.equals(r[1],52)
        a.equals(r.neg, 1)
        
        a.true(x.eq(new BigInt(2132546546)))
        a.true(y.eq(new BigInt(58)))
    }
    test_normal1() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("1000000000","hex")
        y := new BigInt(2)
        
        res := x.div(y,r)
        
        a.equals(res._maxindex(),2)
        a.equals(res[1], 0)
        a.equals(res[2], 8)
        a.equals(res.neg, 1)
        
        a.equals(r._maxindex(),1)
        a.equals(r[1],0)
        a.equals(r.neg, 1)
        
        a.true(x.eq(new BigInt("1000000000","hex")))
        a.true(y.eq(new BigInt(2)))
    }
    test_normal2() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt("-200000000","hex")
        y := new BigInt(2)
        
        res := x.div(y,r)
        
        a.equals(res._maxindex(),2)
        a.equals(res[1], 0)
        a.equals(res[2], 1)
        a.equals(res.neg, -1)
        
        a.equals(r._maxindex(),1)
        a.equals(r[1],0)
        a.equals(r.neg, 1)
        
        a.true(x.eq(new BigInt("-200000000","hex")))
        a.true(y.eq(new BigInt(2)))
    }
}

msgbox, , , % "Done!`n`n`n" Assert.Stats(), 8

ExitApp

Esc::ExitApp

#include unit.ahk2
#include BigInt.ahk2
/*
    test_default() {
        global assert, BigInt
        a := new assert(A_ThisFunc, A_LineNumber, this.outputmethods)
        x := new BigInt()
        y := new BigInt()
        
        ;res := x.
        
        a.true(x.eq(new BigInt()))
        a.true(y.eq(new BigInt()))
    }
*/
