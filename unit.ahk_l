; BigIntTest.ahk2

/* Default testing class. use this as starting point

class testing {
    var outputmethods := [func("output_csv")]
    
    test_basetest() {
        a := new assert(A_ThisFunc, A_ThisLine, this.outputmethods)
    }    
}

*/

runUnitTests( classobj ) {
    global Assert
    Assert.total_testgroups++
    for k in classobj.base
        if substr(k,1,5) = "test_" AND IsFunc(classobj[k])  ; call all functions that start with test__
            classobj[k]()
}

class Assert {
    static total_assertions := 0
    static total_tests := 0
    static total_testgroups := 0
    static avg_time := ""
    static total_assertions_passed := 0
    static total_assertions_failed := 0
    static total_tests_passed := 0
    static total_tests_failed := 0
    
    equals( args* ) {
        name := args._maxindex() > 2 ? args.remove(1) : ""
        this._updateresult(name, A_ThisFunc, args[1], args[2], args[1] = args[2])
    }
    
    caseequals( args* ) {
        name := args._maxindex() > 2 ? args.remove(1) : ""
        this._updateresult(name, A_ThisFunc, args[1], args[2], args[1] == args[2])
    }
    
    true( args* ) {
        name := args._maxindex() > 1 ? args.remove(1) : ""
        this._updateresult(name, A_ThisFunc, args[1], True, !!args[1])
    }
    
    false( args* ) {
        name := args._maxindex() > 1 ? args.remove(1) : ""
        this._updateresult(name, A_ThisFunc, args[1], False, !args[1])
    }
    
    empty( args* ) {
        name := args._maxindex() > 1 ? args.remove(1) : ""
        this._updateresult(name, A_ThisFunc, args[1], "", args[1] == "")
    }
    
    notEmpty( args* ) {
        name := args._maxindex() > 1 ? args.remove(1) : ""
        this._updateresult(name, A_ThisFunc, args[1], "[not empty]", args[1] != "")
    }
    
    contains( args* ) {
        name := args._maxindex() > 2 ? args.remove(1) : ""
        this._updateresult(name, A_ThisFunc, args[1], "contains: " args[2], InStr(args[1], args[2]))
    }
    
    startsWith( args* ) {
        name := args._maxindex() > 2 ? args.remove(1) : ""
        this._updateresult(name, A_ThisFunc, args[1], "starts with: " args[2], SubStr(args[1], 1, StrLen(args[2])) = args[2])
    }
    
    endsWith( args* ) {
        name := args._maxindex() > 2 ? args.remove(1) : ""
        this._updateresult(name A_ThisFunc, args[1], "ends with: " args[2], SubStr(args[1], -1*StrLen(args[2])+1) = args[2])
    }
    
    _updateresult(name, method, actual, expected, passed) {
        global Assert
        add := { method: method, actual: actual, expected: expected, passed: passed }
        if name
            add.insert("name", name)
        this.results.insert(add)
        
        this.result := this.result == "" ? passed : passed AND this.result
        Assert.total_assertions++
        if passed
            Assert.total_assertions_passed++
        else
            Assert.total_assertions_failed++
    }
    
    __new( func, line, outputs ) {
        global Assert
        Assert.total_tests++
        this.func := func
        this.line := line
        this.outputs := outputs
        this.results := []
        this.result := ""
        this.start := A_TickCount
    }
    
    __delete() {
        global Assert
        Assert.avg_time := (A_TickCount-this.start + (Assert.avg_time OR 0)) / Assert.total_tests
        if this.result
            Assert.total_tests_passed++
        else
            Assert.total_tests_failed++
        for k,v in this.outputs
            v.(this.result, this.func, this.line, this.results)
    }
    
    Stats() {
        global Assert
        return "#TestGroups: " Assert.total_testgroups 
             . "`n#Tests: " Assert.total_tests ". (" Assert.total_tests_passed " passed, " Assert.total_tests_failed " failed)"
             . "`n#Assertions: " Assert.total_assertions ". (" Assert.total_assertions_passed " passed, " Assert.total_assertions_failed " failed)"
             . "`n" 
             . "`nAvg assertions per test: " Round(Assert.total_assertions / Assert.total_tests, 2) 
             . "`nAvg ms per test: " Round(Assert.avg_time, 3)
    }
}

output_csv(result, func, line, details) {
    
}

output_msgbox(result, func, line, details) {
    if !result
        MsgBox % "Test: " func "`nResult: " result "`nLine: " line "`n" ViewObj(details, [',`n',', '])
}

output_msgbox_all(result, func, line, details) {
    MsgBox % "Test: " func "`nResult: " result "`nLine: " line "`n" ViewObj(details, [',`n',', '])
}

output_treeview(result, func, line, details) {
    ; http://www.autohotkey.com/forum/topic55709.html treeview row coloring
}

#include ViewObj.ahk2
