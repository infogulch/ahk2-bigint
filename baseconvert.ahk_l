base2  := "1111101000"
base3  := "1101001"
base4  := "33220"
base5  := "13000"
base6  := "4344"
base7  := "2626"
base8  := "1750"
base9  := "1331"
base10 := "1000"
base11 := "82a"
base12 := "6b4"
base13 := "5bc"
base14 := "516"
base15 := "46a"
base16 := "3e8"

x := []
x[1] |= 1
msgbox % x[1]

base58chars := "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
addr58 := "1Hdbo1Pa3Vg6ytyXF9bEx4tzZbRUAjPMfE"

;x := fromanybase(addr58, 58, base58chars)
x := fromanybase("abdkdlkjq", 27, "0123456789abcdefghijklmnopq")

msgbox % x.__string()

;s := toanybase(x, 58, base58chars)
s := toanybase(x, 2, "01")

msgbox % s

fromanybase( str, base, chars = "", opt = "big i" ) {
    base := new BigInt(base)
    ret := new BigInt()
    loop StrLen(str)
    {
        c := SubStr(str, -A_Index, 1)
        num := InStr(chars, c, 1)-1
        if num < 0
            return "Error: unexpected character: "" c """
        ret._add((new BigInt(num)).mult(base.pow(A_Index-1)))
    }
    return ret
}

toanybase( this, base, chars = "" ) {
    if base.__class != "BigInt"
        base := new BigInt(base)
    x := this.clone()
    while x.noteq(0)
    {
        x._div(base, rem)
        ret := substr(chars, rem[1]+1, 1) ret
    }
    return ret
}

#include BigInt.ahk_l
ExitApp
Esc::ExitApp
